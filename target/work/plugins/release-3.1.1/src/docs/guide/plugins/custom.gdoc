Not all plugins should be publicly available: some are too specific to certain projects while others are confidential. Still, teams can gain big advantages from deploying such plugins to their own private repositories. Because of that, the Release plugin can of course publish plugins to any target repository and even notify private plugin portals.

h3. Repository types and configuration

Grails supports maven repositories. 

Maven-compatible repositories can be easily set up with either [Artifactory|http://www.jfrog.com/products.php] or [Nexus|http://nexus.sonatype.org/]. 

Whichever type of repository you go for, the [configuration settings|guide:repositories] are mostly the same. The key options are the repository URL and the username and password for deploying to the repository. All of these can be configured in either @~/.grails/settings.groovy@ or @BuildConfig.groovy@. Typically, a single repository hosts many plugins, so it's usually a good idea to put the configuration in @settings.groovy@ and then specify in @grails-app/conf/BuildConfig.groovy@ which repository a plugin should be published to by default:

{code}
grails.project.repos.default = "companyRepo"
{code}

or

{code}
grails.project.repos.default = "grailsCentral"
{code}

for example. This saves you from having to use the @\-\-repository@ command line argument every time you publish a plugin, although you can still use it to override the default. For example, you may have a local Maven-compatible repository you want to test deployment to, so you could configure it in @settings.groovy@ and then run:

{code}
grails publish-plugin --repository=localReleases
{code}


h3. Your own plugin portal

How would you like your own plugin portal for your private plugins? You'll be able to see what plugins are available, tag them and do searches. The [public plugin portal|http://grails.org/plugins] at grails.org is part of that web site, but it's also an [open source project|http://github.com/grails-samples/grails-website] on GitHub. There are also plans to extract the plugin portal so that it can be used independently of the grails.org web site.

Currently, your best option if you want your own portal is to grab a copy of the grails.org source code and run your own version locally. It's a Grails application, so it's not hard to get it started. Once it's up and running, it provides a REST API that the Release plugin can use for plugin release notifications. The portal updates the information for the given plugin and then announces the release in various ways. You'll probably want to disable the announcements, which you can do by modifying the [PluginUpdateService.announceRelease()|http://github.com/grails-samples/grails-website/blob/master/grails-app/services/org/grails/plugin/PluginUpdateService.groovy#L157] method.

Configuring the Release plugin to notify your own portal is straightforward and described in the [configuration section|guide:pluginPortals]. Remember, you can specify a default portal for each project and you can also override that default via the @\-\-portal@ command line argument.

